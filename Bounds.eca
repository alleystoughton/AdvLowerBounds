(* Frameworks for Proving Lower and Upper Bounds Results *)

(* --------------------------------------------------------------------
 * Copyright (c) - 2020-2021 - Boston University
 *
 * Distributed under the terms of the CeCILL-B-V1 license
 * -------------------------------------------------------------------- *)

prover quorum=2 ["Z3" "Alt-Ergo"].  (* both provers must succeed on goals *)

timeout 2.  (* can increase *)

require import AllCore List FSetAux StdOrder.

require export FRange.    (* finite ranges as sets *)
require export AllLists.  (* generating all lists of length over universe *)

(* theory parameters *)

type inp.  (* type of inputs *)

op univ : inp list.  (* universe with concrete ordering *)

op def : inp.  (* default inp *)

axiom univ_def : mem univ def.  (* default inp is in univ *)

axiom univ_uniq : uniq univ.  (* no duplicates in univ *)

type out.  (* type of outputs *)

op arity : {int | 0 <= arity} as ge0_arity.  (* arity of f *)

type aux.  (* auxiliary value, given to f *)

(* if xs : inp list has size arity and all of its elements
   are in univ, then good aux xs returns true iff xs is
   a valid argument to f aux *)

op good : aux -> inp list -> bool.

(* an argument xs to f aux should be a list of inputs of size arity,
   all of whose elements are in univ, and where good aux xs holds -
   note that there may be no such lists *)

op f : aux -> inp list -> out option.

(* when argument to f has the correct arity, is over univ, and
   satisfies good aux, we get Some of an answer *)

axiom good (aux : aux, xs : inp list) :
  size xs = arity => all (mem univ) xs => good aux xs =>
  exists (y : out), f aux xs = Some y.

(* when argument to f has the wrong arity, or is not over univ,
   or does not satisfy good aux, we get None *)

axiom bad (aux : aux, xs : inp list) :
  size xs <> arity \/ ! (all (mem univ) xs) \/ ! good aux xs =>
  f aux xs = None.

(* end of theory parameters *)

(* all possible lists of univ values of size arity that satisfy good
   aux; i.e., all possible arguments to f that will result in Some
   ...; it is possible for this to be the empty list *)

op init_inpss (aux : aux) : inp list list =
  List.filter (good aux) (AllLists.all_lists univ arity).

(* inpss invariant: all lists of possible inputs must be distinct, and
   they must cause (f aux) to return non-None answers: *)

op nosmt inpss_invar (aux : aux, inpss : inp list list) : bool =
  uniq inpss /\ all is_some (map (f aux) inpss).

lemma inpss_invar_uniq (aux : aux, inpss : inp list list) :
  inpss_invar aux inpss => uniq inpss.
proof.
by rewrite /inpss_invar.
qed.

lemma inpss_invar_all_is_some_f (aux : aux, inpss : inp list list) :
  inpss_invar aux inpss => all is_some (map (f aux) inpss).
proof.
by rewrite /inpss_invar.
qed.

lemma inpss_invar_all_size_arity (aux : aux, inpss : inp list list) :
  inpss_invar aux inpss =>
  all (fun inps => size inps = arity) inpss.
proof.
rewrite /inpss_invar => [[_ all_is_some_map_f_aux_inpss]].
rewrite allP => inps inps_in_inpss /=.
have : is_some (f aux inps).
  rewrite allP in all_is_some_map_f_aux_inpss.
  rewrite all_is_some_map_f_aux_inpss mapP.
  by exists inps.
smt(bad negb_or).
qed.

lemma inpss_invar_all_all_mem_univ (aux : aux, inpss : inp list list) :
  inpss_invar aux inpss =>
  all (fun inps => (all (mem univ) inps)) inpss.
proof.
rewrite /inpss_invar => [[_ all_is_some_map_f_aux_inpss]].
rewrite allP => inps inps_in_inpss /=.
have : is_some (f aux inps).
  rewrite allP in all_is_some_map_f_aux_inpss.
  rewrite all_is_some_map_f_aux_inpss mapP.
  by exists inps.
smt(bad negb_or).
qed.

lemma inpss_invar_all_good_aux (aux : aux, inpss : inp list list) :
  inpss_invar aux inpss =>
  all (good aux) inpss.
proof.
rewrite /inpss_invar => [[_ all_is_some_map_f_aux_inpss]].
rewrite allP => inps inps_in_inpss /=.
have : is_some (f aux inps).
  rewrite allP in all_is_some_map_f_aux_inpss.
  rewrite all_is_some_map_f_aux_inpss mapP.
  by exists inps.
smt(bad negb_or).
qed.

lemma inpss_invar_init (aux : aux) : 
  inpss_invar aux (init_inpss aux).
proof.
rewrite /inpss_invar /init_inpss.
split.
rewrite filter_uniq AllLists.all_list_uniq 1:univ_uniq ge0_arity.
have H := AllLists.all_lists_arity_wanted univ arity _.
  apply ge0_arity.
smt(allP mapP mem_filter good).
qed.

lemma inpss_invar_filter
      (aux: aux, inpss : inp list list, g : inp list -> bool) :
  inpss_invar aux inpss => inpss_invar aux (filter g inpss).
proof.
rewrite /inpss_invar => [[uniq_inpss all_is_some_map_f_aux_inpss]].
split.
by rewrite filter_uniq.
smt(mapP mem_filter allP map_f).
qed.

lemma inpss_invar_size (aux : aux, inpss : inp list list) :
  inpss_invar aux inpss =>
  all (fun inps => size inps = arity) inpss.
proof.
rewrite /inpss_invar => [[_ all_is_some_map_f_inpss]].
rewrite allP => inps inps_in_inpss /=.
rewrite allP in all_is_some_map_f_inpss.
have H := all_is_some_map_f_inpss (f aux inps) _.
  by rewrite (map_f (f aux)).
smt(good bad).
qed.

lemma inpss_invar_size_alt
      (aux : aux, inpss : inp list list, inps : inp list) :
  inpss_invar aux inpss => inps \in inpss =>
  size inps = arity.
proof.
move => inv.
have := inpss_invar_size aux inpss _.
  done.
rewrite allP /= => all_of_inpss_size inps_in_inpss.
by apply all_of_inpss_size.
qed.

(* filter a list of lists, keeping all the lists whose nth elements
   are y (n should be a valid index of all elements of xss) *)

op filter_nth (xss : 'a list list, n : int, y : 'a) : 'a list list =
  filter (fun xs => nth witness xs n = y) xss.

lemma mem_filter_nth (xss : 'a list list, n : int, y : 'a, ys : 'a list) :
  ys \in filter_nth xss n y <=> ys \in xss /\ nth witness ys n = y.
proof.
by rewrite mem_filter.
qed.

lemma inpss_invar_filter_nth
      (aux: aux, inpss : inp list list, n : int, y : inp) :
  inpss_invar aux inpss =>
  inpss_invar aux (filter_nth inpss n y).
proof.
move => invar_aux_inpss.
by rewrite /filter_nth inpss_invar_filter.
qed.

(* test whether (f aux) agrees on all possible input lists

   note that this could be true because inpss is empty *)

op inpss_done (aux : aux, inpss : inp list list) : bool =
  forall (x y : out option),
  x \in map (f aux) inpss => y \in map (f aux) inpss => x = y.

(* test whether inpss has at least one element and
   every element of map (f aux) inps is Some out *)

op inpss_answer (aux : aux, inpss : inp list list, out : out) : bool =
  inpss <> [] /\
  forall (x : out option),
  x \in map (f aux) inpss => x = Some out.

lemma inpss_answer_implies_done (aux : aux, inpss : inp list list, out : out) :
  inpss_answer aux inpss out => inpss_done aux inpss.
proof.
move => [_ inpss_ans_aux_inpss_out].
by rewrite /inpss_done =>
     x y
     /inpss_ans_aux_inpss_out => ->
     /inpss_ans_aux_inpss_out => ->.
qed.

(* operator and lemmas about queries *)

op queries_in_range (queries : int fset) : bool =
  forall (i : int), i \in queries => 0 <= i < arity.

lemma queries_in_range0 :
  queries_in_range fset0.
proof.
move => i.
by rewrite in_fset0.
qed.

lemma queries_in_range_add (queries : int fset, i : int) :
  0 <= i < arity => queries_in_range queries =>
  queries_in_range (queries `|` fset1 i).
proof.
move => i_in_rng @/queries_in_range qir_queries j.
rewrite in_fsetU1 => [] [j_in_queries | -> //].
by apply qir_queries.
qed.

lemma queries_in_range_card_le_arity (queries : int fset) :
  queries_in_range queries => card queries <= arity.
proof.
move => qir_queries.
rewrite FRange.sub_range_card_leq 1:ge0_arity.
apply qir_queries.
qed.

op all_in_range_queries (queries : int fset) : bool =
  forall (i : int), 0 <= i < arity => i \in queries.

lemma all_queries_cond (queries : int fset) :
  queries_in_range queries =>
  (card queries = arity <=> all_in_range_queries queries).
proof.
move => qir_queries.
split => [card_queries_eq_arity i i_in_rng | airq_queries]. 
by rewrite (FRange.sub_range_card_max queries arity).
rewrite (lez_anti (card queries) arity) //.
split => [| _].
by rewrite (FRange.sub_range_card_leq queries arity) 1:ge0_arity.
by rewrite (FRange.all_range_card_geq queries arity) 1:ge0_arity.
qed.

op queries_eq_all_range (queries : int fset) : bool =
  queries_in_range queries /\ all_in_range_queries queries.

lemma all_queries_predP (queries : int fset, f : int -> bool) :
  queries_eq_all_range queries =>
  (all f (elems queries)) <=> (forall (i : int), 0 <= i < arity => f i).
proof.
move => @/queries_eq_all_range [#] qir_queries airq_queries.
split.
rewrite all_elemsP => all_queries_f i i_in_rng.
by rewrite all_queries_f airq_queries.
rewrite all_elemsP => H x x_in_queries.
by rewrite H qir_queries.
qed.

(* an adversary - used for both the lower and upper bounds games *)

module type ADV = {
  (* tell adversary to initialize itself and choose aux;
     must initialize its global variables *)
  proc *init() : aux

  (* ask adversary to answer query of what the ith input is *)
  proc ans_query(i : int) : inp
}.  

(* framework for proving worst case lower bounds results using the
   adversarial method

   in this model, the algorithm makes queries about an input that it
   doesn't have direct access to; it is trying to learn enough about
   the input so that the answer is unambiguous (but it doesn't have
   to actually produce this answer)

   this is formalized using a lower bounds game, which also features
   an adversary whose job is to answer queries by the algorithm

   the game keeps track of the inputs that are consistent with the
   queries/answers of the algorithm/adversary; this is initialized
   to be init_inpss aux, where aux is chosen by the adversary

   the job of the adversary is choose aux and answer the queries of
   the algorithm in a way that delays the stage at which the remaining
   possible inputs (the ones consistent with the queries/answer made
   so far) all have a unique answer, at which point the game ends

   in the proof of a lower bounds theorem, we exhibit an adversary,
   and prove that, for all algorithms, it is guaranteed to make the
   game run a number of stages (each corresponding to a query/answer)
   that is >= the desired bound, as a function of the size of the
   input, or to terminate because the algorithm committed an error (by
   asking an illegal query, including the same query twice) *)

theory LB.

(* an algorithm *)

module type ALG = {
  (* tell algorithm to initialize itself, giving it aux;
     must initialize its global variables *)
  proc *init(aux : aux) : unit

  (* ask algorithm to make an input query, choosing an input list
     index i such that 0 <= i < arity *)
  proc make_query() : int

  (* tell algorithm the result of its query *)
  proc query_result(x : inp) : unit
}.

(* game connecting algorithm and adversary

   it has no global variables, and, since Adv.init and Alg.init
   initialize the global variables of Adv and Alg, respectively,
   running G won't depend on the initial memory *)

module G(Alg : ALG, Adv : ADV) = {
  proc main() : bool *          (* error? *)
                int = {         (* final stage *)
    var inpss : inp list list;  (* current possible lists of inputs *)
    var don : bool;             (* is game done? *)
    var error : bool;           (* has game made illegal query? *)
    var stage : int;            (* stage of game *)
    var queries : int fset;     (* valid queries made by algorithm *)
    var aux : aux;              (* auxiliary value chosen by adversary *)

    var i : int;
    var inp : inp;

    aux <- Adv.init();  (* initialize Adv, letting it choose aux *)
    Alg.init(aux);  (* initialize Alg, giving it aux *)
    inpss <- init_inpss aux;  (* start with all good aux lists of inputs *)
    (* by lemma inpss_invar_init, the invariant is established *)
    error <- false;  (* no error so far *)
    don <- inpss_done aux inpss;  (* are we already done? *)
    stage <- 0;
    queries <- fset0;
    while (!don /\ !error) {
      i <@ Alg.make_query();  (* let Alg make query *)
      if (0 <= i < arity /\ ! i \in queries) {
        queries <- queries `|` fset1 i;
        stage <- stage + 1;
        inp <@ Adv.ans_query(i);  (* ask Adv to answer query *)
        inp <- (inp \in univ) ? inp : def;  (* use def if inp not in universe *)
        Alg.query_result(inp);  (* tell Alg result of its query *)
        (* get rid of lists of inputs that aren't consistent with answer;
           by lemma inpss_invar_filter_nth, inpss_invar is preserved *)
        inpss <- filter_nth inpss i inp;
        don <- inpss_done aux inpss;  (* perhaps we're done now? *)
      }
      else {
        error <- true;  (* query was invalid *)
      }
    }
    return (error, stage);
  }
}.

(* lemma for showing G(Alg, Adv).main terminates with probability 1%r,
   under assumption that the procedures of Alg and Adv establish (in
   the case of the init procedures) or preserve (in the case of the
   other operators) invariants on the states of Alg/Adv, also with
   probability 1%r *)

lemma G_ll (Alg <: ALG) (Adv <: ADV{Alg})
           (alg_term_invar : glob Alg -> bool)
           (adv_term_invar : glob Adv -> bool) :
  phoare
  [Alg.init : true ==> alg_term_invar (glob Alg)] = 1%r =>
  phoare
  [Alg.make_query :
   alg_term_invar (glob Alg) ==> alg_term_invar (glob Alg)] = 1%r =>
  phoare
  [Alg.query_result :
   alg_term_invar (glob Alg) ==> alg_term_invar (glob Alg)] = 1%r =>
  phoare
  [Adv.init : true ==> adv_term_invar (glob Adv)] = 1%r =>
  phoare
  [Adv.ans_query :
   adv_term_invar (glob Adv) ==> adv_term_invar (glob Adv)] = 1%r =>
  islossless G(Alg, Adv).main.
proof.
move =>
  Alg_init_term Alg_make_query_term Alg_query_result_term
  Adv_init_term Adv_ans_query_term.
proc.
while
  (queries_in_range queries /\ stage = card queries /\
   alg_term_invar (glob Alg) /\ adv_term_invar (glob Adv))
  (if error then 0 else arity - stage + 1).
move => z.
seq 1 :
  (queries_in_range queries /\ stage = card queries /\
   alg_term_invar (glob Alg) /\ adv_term_invar (glob Adv) /\
  !don /\ !error /\ (if error then 0 else arity - stage + 1) = z).
conseq (_ : _ ==> _ : = 1%r).
call Alg_make_query_term.
auto.
call Alg_make_query_term.
auto.
if.
wp.
call Alg_query_result_term.
wp.
call Adv_ans_query_term.
auto; progress.
by rewrite queries_in_range_add.
by rewrite fcardUindep1.
smt().
auto; smt(queries_in_range_card_le_arity).
hoare.
conseq (_ : _ ==> _ : = 1%r).
call Alg_make_query_term.
auto.
trivial.
wp.
call Alg_init_term.
call Adv_init_term.
auto; progress.
rewrite queries_in_range0.
by rewrite fcards0.
smt(queries_in_range_card_le_arity).
qed.

end LB.

(* framework for proving worst case upper bounds results

   in this model, the algorithm makes queries about an input that it
   doesn't have direct access to; it is trying to learn enough about
   the input so that it can determine and report the corresponding
   output

   this is formalized using an upper bounds game, which also features
   an adversary whose job is to answer queries by the algorithm; the
   adversary could implement a fixed, non-probabilistic procedure,
   or it could be (probabilistically) adaptive

   the game keeps track of the inputs that are consistent with the
   queries/answers of the algorithm/adversary; this is initialized
   to be init_inpss aux, where aux is chosen by the adversary

   if the algorithm reports an output, and that output is indeed
   the unique output of the remaining inputs, then the algorithm
   has succeeded; reporting an incorrect output (for any of
   the remaining inputs) is an error

   if the adversary chooses aux or answers a query in such a way that
   the remaining possible inputs becomes empty, then the algorithm is
   considered to have succeeded, and the game ends with no error

   if the algorithm makes an illegal query, it has committed an error,
   and the game ends

   in the proof of an upper bounds theorem, we attempt to prove that,
   for all adversaries, the game terminates without error and in
   no more than an upper bound number of steps, as a function of
   the size of an input *)

theory UB.  (* upper bounds framework *)

(* response from algorithm *)

type response = [
  | Response_Query  of int  (* int is index into input list *)
  | Response_Report of out  (* out is the algorithm's output *)
].

op dec_response_query (resp : response) : int option =
  with resp = Response_Query i  => Some i
  with resp = Response_Report _ => None.

op dec_response_report (resp : response) : out option =
  with resp = Response_Query _  => None
  with resp = Response_Report x => Some x.

lemma dec_response_query_none_equiv (resp : response) :
  dec_response_query resp = None <=>
  dec_response_report resp <> None.
proof. by case resp. qed.

lemma dec_response_report_none_equiv (resp : response) :
  dec_response_report resp = None <=>
  dec_response_query resp <> None.
proof. by case resp. qed.

op is_response_query (resp : response) : bool =
  dec_response_query resp <> None.

op is_response_report (resp : response) : bool =
  dec_response_report resp <> None.

lemma not_is_response_query (resp : response) :
  ! is_response_query resp <=> is_response_report resp.
proof.
rewrite /is_response_query /is_response_report /=.
by rewrite dec_response_query_none_equiv.
qed.

lemma not_is_response_report (resp : response) :
  ! is_response_report resp <=> is_response_query resp.
proof.
rewrite /is_response_query /is_response_report /=.
by rewrite dec_response_report_none_equiv.
qed.

(* an algorithm *)

module type ALG = {
  (* tell algorithm to initialize itself, giving it aux;
     must initialize global variables *)
  proc *init(aux : aux) : unit

  (* ask algorithm to either: make an input query, choosing an input
     list index i such that 0 <= i < arity; or report its output *)
  proc make_query_or_report_output() : response

  (* tell algorithm the result of its query *)
  proc query_result(x : inp) : unit
}.

(* game connecting algorithm and adversary

   it has no global variables, and, since Alg.init and Adv.init
   initialize the global variables of Alg and Adv, running G won't
   depend on the initial memory *)

module G(Alg : ALG, Adv : ADV) = {
  proc main()
         : bool *                 (* error? *)
           int = {                (* final stage *)
    var inpss   : inp list list;  (* current possible lists of inputs *)
    var aux     : aux;            (* auxiliary value chosen by adversary *)
    var error   : bool;           (* has algorithm made illegal query or
                                    reported incorrect output? *)
    var don     : bool;           (* has algorithm succeeded? *)
    var stage   : int;            (* stage of game *)
    var queries : int fset;       (* valid queries made by algorithm *)

    var resp : response;
    var i    : int;
    var inp  : inp;
    var out  : out;

    aux <- Adv.init();  (* initialize Adv, letting it choose aux *)
    Alg.init(aux);  (* initialize Alg, giving it aux *)
    inpss <- init_inpss aux;  (* start with all good aux lists of inputs *)
    (* by lemma inpss_invar_init, the invariant is established *)
    error <- false;    (* no error so far *)
    don <- inpss = [];  (* algorithm succeeds if no good aux inputs *)
    stage <- 0;        (* stage counts number of queries *)
    queries <- fset0;  (* no queries initially *)
    while (!don /\ !error) {
      (* we have: inpss <> [] *)
      (* let Alg make query or report output *)
      resp <@ Alg.make_query_or_report_output();
      if (is_response_query resp) {
        i <- oget (dec_response_query resp);
        if (0 <= i < arity /\ ! i \in queries) {
          queries <- queries `|` fset1 i;
          stage <- stage + 1;
          inp <@ Adv.ans_query(i);  (* ask Adv to answer query *)
          (* use def if inp not in universe *)
          inp <- (inp \in univ) ? inp : def;
          (* tell Alg result of its query *)
          Alg.query_result(inp);
          (* get rid of lists of inputs that aren't consistent with answer;
             by lemma inpss_invar_filter_nth, inpss_invar is preserved *)
          inpss <- filter_nth inpss i inp;
          if (inpss = []) {  (* if Adv's choice has left no inputs, *)
            don <- true;     (* then Alg succeeds *)
          }
        }
        else {
          error <- true;  (* query was invalid *)
        }
      }
      else {  (* is_response_report resp *)
        out <- oget (dec_response_report resp);
        if (inpss_answer aux inpss out) {
          don <- true;
        }
        else {
          error <- true;
        }
      }
    }
    return (error, stage);
  }
}.

(* lemma for showing G(Alg, Adv).main terminates with probability 1%r,
   under assumption that the procedures of Alg and Adv establish (in
   the case of the init procedures) or preserve (in the case of the
   other operators) invariants on the states of Alg/Adv, also with
   probability 1%r *)

lemma G_ll (Alg <: ALG) (Adv <: ADV{Alg})
           (alg_term_invar : glob Alg -> bool)
           (adv_term_invar : glob Adv -> bool) :
  phoare
  [Alg.init : true ==> alg_term_invar (glob Alg)] = 1%r =>
  phoare
  [Alg.make_query_or_report_output :
   alg_term_invar (glob Alg) ==> alg_term_invar (glob Alg)] = 1%r =>
  phoare
  [Alg.query_result :
   alg_term_invar (glob Alg) ==> alg_term_invar (glob Alg)] = 1%r =>
  phoare
  [Adv.init : true ==> adv_term_invar (glob Adv)] = 1%r =>
  phoare
  [Adv.ans_query :
   adv_term_invar (glob Adv) ==> adv_term_invar (glob Adv)] = 1%r =>
  islossless G(Alg, Adv).main.
proof.
move =>
  Alg_init_term Alg_make_query_or_report_output_term Alg_query_result_term
  Adv_init_term Adv_ans_query_term.
proc.
while
  (queries_in_range queries /\ stage = card queries /\
   alg_term_invar (glob Alg) /\ adv_term_invar (glob Adv))
  (if don \/ error then 0 else arity - stage + 1).
move => z.
seq 1 :
  (queries_in_range queries /\ stage = card queries /\
   alg_term_invar (glob Alg) /\ adv_term_invar (glob Adv) /\ !don /\
   !error /\ (if don \/ error then 0 else arity - stage + 1) = z).
conseq (_ : _ ==> _ : = 1%r).
call Alg_make_query_or_report_output_term.
auto.
call Alg_make_query_or_report_output_term.
auto.
if.
sp.
if.
wp.
call Alg_query_result_term.
wp.
call Adv_ans_query_term.
auto; progress.
by rewrite queries_in_range_add.
by rewrite fcardUindep1.
smt(queries_in_range_card_le_arity).
by rewrite queries_in_range_add.
by rewrite fcardUindep1.
smt().
auto; smt(queries_in_range_card_le_arity).
auto; smt(not_is_response_query queries_in_range_card_le_arity).
hoare.
conseq (_ : _ ==> _ : = 1%r).
call Alg_make_query_or_report_output_term.
auto.
trivial.
wp.
call Alg_init_term.
call Adv_init_term.
auto; progress.
rewrite queries_in_range0.
by rewrite fcards0.
smt(queries_in_range_card_le_arity).
qed.

end UB.

(* convert an upper bound algorithm to a lower bound one *)

module UBAlg_to_LBAlg (UBAlg : UB.ALG) : LB.ALG = {
  proc init(aux : aux) : unit = {
    UBAlg.init(aux);
  }
  
  proc make_query() : int = {
    var resp : UB.response;
    var i : int;
    resp <@ UBAlg.make_query_or_report_output();
    if (UB.is_response_query resp) {
      i <- oget (UB.dec_response_query resp);
    }
    else {  (* is_response_report resp *)
      i <- -1;  (* must be an error, as if game has not
                   ended, there is no unambiguous answer *)
    }
    return i;
  }
  
  proc query_result(x : inp) : unit = {
    UBAlg.query_result(x);
  }
}.

(* we will show that, from the application of the conclusion of a
   lower bound theorem for adversary Adv and bound lb, applied to
   lower bound algorithm UBAlg_to_LBAlg(Alg), for an upper bound
   algorithm Alg, and for any ub < lb, we can conclude that the
   probability that the upper bound game G(Alg, Adv).main() returns
   without error and with the final stage being <= ub is 0%r

   to prove this, we need two helper lemmas, where the first is used
   to prove the second *)

lemma prob_le_ub_lb_succ_equiv
      (ub : int)
      (Alg <: UB.ALG) (Adv <: ADV{Alg})
      (alg_term_invar : glob Alg -> bool)
      (adv_term_invar : glob Adv -> bool) :
  phoare
  [Alg.init : true ==> alg_term_invar (glob Alg)] = 1%r =>
  phoare
  [Alg.make_query_or_report_output :
   alg_term_invar (glob Alg) ==> alg_term_invar (glob Alg)] = 1%r =>
  phoare
  [Alg.query_result :
   alg_term_invar (glob Alg) ==> alg_term_invar (glob Alg)] = 1%r =>
  phoare
  [Adv.init : true ==> adv_term_invar (glob Adv)] = 1%r =>
  phoare
  [Adv.ans_query :
   adv_term_invar (glob Adv) ==> adv_term_invar (glob Adv)] = 1%r =>
  equiv
  [UB.G(Alg, Adv).main ~ LB.G(UBAlg_to_LBAlg(Alg), Adv).main :
   true ==>
   (! res{1}.`1 /\ res{1}.`2 <= ub =>
    ! res{2}.`1 /\ res{2}.`2 <= ub)].
proof.
move =>
  Alg_init_term Alg_make_query_or_report_output_term Alg_query_result_term
  Adv_init_term Adv_ans_query_term.
proc.
seq 7 7 :
  (={aux, inpss, error, stage, queries, glob Alg, glob Adv} /\
   alg_term_invar (glob Alg){1} /\ adv_term_invar (glob Adv){1} /\ 
   queries_in_range queries{1} /\ stage{1} = card queries{1} /\ !error{1} /\
   (don{1} <=> inpss{1} = []) /\ don{2} = inpss_done aux{2} inpss{2}).
wp; inline*.
call (_ : ={aux} ==> ={glob Alg} /\ alg_term_invar (glob Alg){1}).
conseq
  (_ : ={aux} ==> ={glob Alg})
  (_ : true ==> alg_term_invar (glob Alg))
  (_ : true ==> alg_term_invar (glob Alg)).
smt().
conseq Alg_init_term.
conseq Alg_init_term.
by proc (true).
wp.
call (_ : true ==> ={res, glob Adv} /\ adv_term_invar (glob Adv){1}).
conseq
  (_ : true ==> ={res, glob Adv})
  (_ : true ==> adv_term_invar (glob Adv))
  (_ : true ==> adv_term_invar (glob Adv)).
trivial.
conseq Adv_init_term.
conseq Adv_init_term.
by proc (true).
auto; progress [-delta].
rewrite queries_in_range0. 
by rewrite fcards0.
splitwhile{1} 1 : (! (inpss_done aux inpss)).
splitwhile{2} 1 : true.
seq 1 1 :
  (={aux, inpss, error, stage, queries, glob Alg, glob Adv} /\
   alg_term_invar (glob Alg){1} /\ adv_term_invar (glob Adv){1} /\
   queries_in_range queries{1} /\ stage{1} = card queries{1} /\
   (don{1} => inpss_done aux{1} inpss{1}) /\
   don{2} = inpss_done aux{2} inpss{2} /\
   (don{1} \/ error{1} \/ inpss_done aux{1} inpss{1}) /\
   (don{2} \/ error{2})).
while
  (={aux, inpss, error, stage, queries, glob Alg, glob Adv} /\
   alg_term_invar (glob Alg){1} /\ adv_term_invar (glob Adv){1} /\
   queries_in_range queries{1} /\ stage{1} = card queries{1} /\
   (don{1} => inpss_done aux{1} inpss{1}) /\
   don{2} = inpss_done aux{2} inpss{2}).
inline*.
seq 1 1 :
  (={aux, inpss, error, stage, queries, glob Alg, glob Adv, resp} /\
   alg_term_invar (glob Alg){1} /\ adv_term_invar (glob Adv){1} /\
   queries_in_range queries{1} /\ stage{1} = card queries{1} /\
   (don{1} => inpss_done aux{1} inpss{1}) /\
   don{2} = inpss_done aux{2} inpss{2} /\
   !don{1} /\ !error{1} /\ ! inpss_done aux{1} inpss{1} /\
   !don{2} /\ !error{2}).
call
  (_ :
   ={glob Alg} /\ alg_term_invar (glob Alg){1} ==>
   ={res, glob Alg} /\ alg_term_invar (glob Alg){1}).
conseq
  (_ : ={glob Alg} /\ alg_term_invar (glob Alg){1} ==> ={res, glob Alg})
  (_ : alg_term_invar (glob Alg) ==> alg_term_invar (glob Alg))
  (_ : alg_term_invar (glob Alg) ==> alg_term_invar (glob Alg)) => //.
conseq Alg_make_query_or_report_output_term.
conseq Alg_make_query_or_report_output_term.
by proc (true).
auto.
if => //.
sp 1 2.
if => //.
sp; elim* => stage_R queries_R stage_L queries_L.
wp.
call
  (_ :
   ={x, glob Alg} /\ alg_term_invar (glob Alg){1} ==>
   ={glob Alg} /\ alg_term_invar (glob Alg){1}).
conseq
  (_ : ={x, glob Alg} /\ alg_term_invar (glob Alg){1} ==> ={glob Alg})
  (_ : alg_term_invar (glob Alg) ==> alg_term_invar (glob Alg))
  (_ : alg_term_invar (glob Alg) ==> alg_term_invar (glob Alg)) => //.
conseq Alg_query_result_term.
conseq Alg_query_result_term.
by proc (true).
wp.
call
  (_ :
   ={i, glob Adv} /\ adv_term_invar (glob Adv){1} ==>
   ={res, glob Adv} /\ adv_term_invar (glob Adv){1}).
conseq
  (_ : ={i, glob Adv} /\ adv_term_invar (glob Adv){1} ==> ={res, glob Adv})
  (_ : adv_term_invar (glob Adv) ==> adv_term_invar (glob Adv))
  (_ : adv_term_invar (glob Adv) ==> adv_term_invar (glob Adv)) => //.
conseq Adv_ans_query_term.
conseq Adv_ans_query_term.
by proc (true).
auto; progress [-delta].
by rewrite queries_in_range_add.
by rewrite fcardUindep1.
smt(). smt().
by rewrite queries_in_range_add.
by rewrite fcardUindep1.
smt().
auto.
sp 1 2.
rcondf{1} 1.
auto; progress [-delta].
smt(inpss_answer_implies_done).
rcondf{2} 1; first auto.
auto.
auto; smt().
case (error{1}).
rcondf{1} 1; first auto; progress; smt().
rcondf{2} 1; first auto; progress; smt().
auto; smt().
rcondf{2} 1; first auto; progress; smt().
exists* stage{1}; elim* => ub'.
seq 1 0 : (!error{2} /\ stage{2} = ub' /\ ub' <= stage{1}).
while{1}
  (queries_in_range queries{1} /\ stage{1} = card queries{1} /\
   alg_term_invar (glob Alg){1} /\ adv_term_invar (glob Adv){1} /\
   ub' <= stage{1})
  (if don{1} \/ error{1} then 0 else arity - stage{1} + 1).
move => &m z.
seq 1 :
  (queries_in_range queries /\ stage = card queries /\
   alg_term_invar (glob Alg) /\ adv_term_invar (glob Adv) /\ !don /\
   ub' <= stage /\ !error /\ 
   (if don \/ error then 0 else arity - stage + 1) = z).
conseq (_ : _ ==> _ : = 1%r).
call Alg_make_query_or_report_output_term.
auto.
call Alg_make_query_or_report_output_term.
auto.
if.
sp.
if.
wp.
call Alg_query_result_term.
wp.
call Adv_ans_query_term.
auto; progress [-delta].
by rewrite queries_in_range_add.
by rewrite fcardUindep1.
smt().
smt(queries_in_range_card_le_arity).
by rewrite queries_in_range_add.
by rewrite fcardUindep1.
smt(). smt().
auto; smt(queries_in_range_card_le_arity).
auto; smt(UB.not_is_response_query queries_in_range_card_le_arity).
auto; progress [-delta].
hoare.
conseq (_ : _ ==> _ : = 1%r).
call Alg_make_query_or_report_output_term.
auto.
trivial.
wp.
auto; progress.
smt(queries_in_range_card_le_arity).
auto; smt().
qed.

lemma Prob_LE_UB_LB_Succ
      (ub : int)
      (Alg <: UB.ALG) (Adv <: ADV{Alg})
      (alg_term_invar : glob Alg -> bool)
      (adv_term_invar : glob Adv -> bool)
      &m :
  phoare
  [Alg.init : true ==> alg_term_invar (glob Alg)] = 1%r =>
  phoare
  [Alg.make_query_or_report_output :
   alg_term_invar (glob Alg) ==> alg_term_invar (glob Alg)] = 1%r =>
  phoare
  [Alg.query_result :
   alg_term_invar (glob Alg) ==> alg_term_invar (glob Alg)] = 1%r =>
  phoare
  [Adv.init : true ==> adv_term_invar (glob Adv)] = 1%r =>
  phoare
  [Adv.ans_query :
   adv_term_invar (glob Adv) ==> adv_term_invar (glob Adv)] = 1%r =>
  Pr[UB.G(Alg, Adv).main() @ &m :
       ! res.`1 /\ res.`2 <= ub] <=
  Pr[LB.G(UBAlg_to_LBAlg(Alg), Adv).main() @ &m :
       ! res.`1 /\ res.`2 <= ub].
proof.
move =>
  Alg_init_term Alg_make_query_or_report_output_term Alg_query_result_term
  Adv_init_term Adv_ans_query_term.
by byequiv
   (prob_le_ub_lb_succ_equiv
    ub Alg Adv alg_term_invar adv_term_invar _ _ _ _ _).
qed.

lemma lb_conseq_for_ub
      (lb ub : int)
      (Alg <: UB.ALG) (Adv <: ADV{Alg})
      (alg_term_invar : glob Alg -> bool)
      (adv_term_invar : glob Adv -> bool)
      &m :
  phoare
  [Alg.init : true ==> alg_term_invar (glob Alg)] = 1%r =>
  phoare
  [Alg.make_query_or_report_output :
   alg_term_invar (glob Alg) ==> alg_term_invar (glob Alg)] = 1%r =>
  phoare
  [Alg.query_result :
   alg_term_invar (glob Alg) ==> alg_term_invar (glob Alg)] = 1%r =>
  phoare
  [Adv.init : true ==> adv_term_invar (glob Adv)] = 1%r =>
  phoare
  [Adv.ans_query :
   adv_term_invar (glob Adv) ==> adv_term_invar (glob Adv)] = 1%r =>
  (* assuming a lower bound result for bound lb and Adv, applied to
     LB.G(UBAlg_to_LBAlg(Alg) : *)
  Pr[LB.G(UBAlg_to_LBAlg(Alg), Adv).main() @ &m :
       res.`1 \/ lb <= res.`2] = 1%r =>
  (* assuming ub < lb: *)
  ub < lb =>
  (* there is zero probability that UB.G(Alg, Adv).main() succeeds
     with a final stage that is no more than ub *)
  Pr[UB.G(Alg, Adv).main() @ &m :
       ! res.`1 /\ res.`2 <= ub] = 0%r.
proof.
move =>
  Alg_init_term Alg_make_query_or_report_output_term Alg_query_result_term
  Adv_init_term Adv_ans_query_term lb_prob1 lt_ub_lb.
case
  (Pr[UB.G(Alg, Adv).main() @ &m : ! res.`1 /\ res.`2 <= ub] = 0%r)
  => [// | contrad_ub_ne0].
have contrad_ub_gt0 :
  0%r < Pr[UB.G(Alg, Adv).main() @ &m : ! res.`1 /\ res.`2 <= ub].
  have /# :
    0%r <= Pr[UB.G(Alg, Adv).main() @ &m : ! res.`1 /\ res.`2 <= ub].
    by rewrite Pr [mu_ge0].
have contrad_lb_gt0 :
  0%r < Pr[LB.G(UBAlg_to_LBAlg(Alg), Adv).main() @ &m : ! res.`1 /\ res.`2 <= ub].
  rewrite
    (RealOrder.ltr_le_trans
     Pr[UB.G(Alg, Adv).main() @ &m : ! res.`1 /\ res.`2 <= ub]) //.
  by rewrite (Prob_LE_UB_LB_Succ ub Alg Adv alg_term_invar adv_term_invar).
have contrad_lb_eq0 :
  Pr[LB.G(UBAlg_to_LBAlg(Alg), Adv).main() @ &m :
       ! res.`1 /\ res.`2 <= ub] = 0%r.
  have -> :
    Pr[LB.G(UBAlg_to_LBAlg(Alg), Adv).main() @ &m :
         ! res.`1 /\ res.`2 <= ub] =
    Pr[LB.G(UBAlg_to_LBAlg(Alg), Adv).main() @ &m :
         ! (res.`1 \/ ! res.`2 <= ub)].
    rewrite Pr [mu_eq] /#.
  rewrite Pr [mu_not].
  have -> :
    Pr[LB.G(UBAlg_to_LBAlg(Alg), Adv).main() @ &m : true] = 1%r.
    have :
      Pr[LB.G(UBAlg_to_LBAlg(Alg), Adv).main() @ &m :
           res.`1 \/ lb <= res.`2] <=
      Pr[LB.G(UBAlg_to_LBAlg(Alg), Adv).main() @ &m : true].
      by rewrite Pr [mu_sub].
    rewrite lb_prob1 => ge1_term.
    apply RealOrder.ler_anti.
    split => [| //]; by rewrite Pr [mu_le1].
  have -> // :
    Pr[LB.G(UBAlg_to_LBAlg(Alg), Adv).main() @ &m :
         res.`1 \/ ! res.`2 <= ub] = 1%r.
    apply RealOrder.ler_anti.
    split => [| _]; first by rewrite Pr [mu_le1].
    have :
      Pr[LB.G(UBAlg_to_LBAlg(Alg), Adv).main() @ &m :
           res.`1 \/ lb <= res.`2] <=
      Pr[LB.G(UBAlg_to_LBAlg(Alg), Adv).main() @ &m :
           res.`1 \/ ! res.`2 <= ub].
      by rewrite Pr [mu_sub] 1:/#.
    by rewrite lb_prob1.
move : contrad_lb_gt0.
by rewrite contrad_lb_eq0.
qed.
